import os
#run: snakemake --cores 64 --keep-incomplete --wait-for-files --rerun-incomplete --latency-wait 100 --nt

with open("params.json", "r") as f:
        params = json.load(f)


slurm=params["slurm"]
RefGenes = params["RefGenes"]
HG38 = params["HG38"]
CHM13 = params["CHM13"]
QueryPath = params["QueryPath"]
ScriptFolder = params["ScriptFolder"]
Genelist = params["Genelist"]
SaveFolder = params["SaveFolder"]
TempFolder = params["TempFolder"]
hprcfitler=params["hprcfitler"]

queries = {"CHM13_h1": CHM13, "HG38_h1":HG38}
with open(QueryPath, mode = 'r') as f:
	for line in f:
		line = line.split()
		queries[line[0]] = line[1]
		
wksamples = list(queries.keys()) 

with open(hprccramfile, mode = 'r') as f:
	hprccrams = [x.split()[0].split("/")[-1].split(".")[0] for x in f.read().splitlines()]


allprefixes = [SaveFolder+file for file in os.listdir(SaveFolder) if file[-6:] == ".fasta"  ]

rule all:
	input:
		kmer  = [prefix+"_kmer.list" for prefix in allprefixes],
		filterkmer   = [prefix+"_filter.fa_kmer.list" for prefix in allprefixes],
		
		strdcorr  = [prefix for prefix in allprefixes],
		filterfile  = [prefix+"_filter.fa" for prefix in allprefixes],
		
		anchorfile  = [prefix+"_annotate.fa" for prefix in allprefixes],
		
		graphalign=[ancient(prefix+"_annotate.fa_allgraphalign.out") for prefix in allprefixes],
		graph=[ancient(prefix+"_annotate.fa_graph.FA") for prefix in allprefixes],
		
		typefile = [prefix+"_annotate.fa_types.txt" for prefix in allprefixes],
                refmatch = [prefix+"_annotate.fa_refmatch" for prefix in allprefixes],

                typeannotates = [prefix+"_annotate.fa_typeannotate.txt" for prefix in allprefixes  ],	
	
rule postfilter:
	input:
		strdcorr = "{prefix}",
		kmer = "{prefix}_kmer.list"
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		chm13=CHM13,
		hprcerror=hprcfitler
	resources:
		mem_mb=1000,
		slurm_extra="--mem=1G -c 1 "
	threads: 1
	output:
		filterfile = "{prefix}_filter.fa",
		filterkmer = "{prefix}_filter.fa_kmer.list"
	run:
		shell ("python {params.script}/querytrim_bykmer.py -i {input.strdcorr} -k  {input.kmer} -o {output.filterfile}_raw -l {output.filterkmer} > {output.filterfile}_info -c 0 -r 0.00 ")

		shell ("python {params.script}/filtershortcontigs.py -i {output.filterfile}_raw  -o {output.filterfile} -r {params.hg38},{params.chm13}  -e {params.hprcerror} -q {params.qpath}")
		
rule annotate:
	input:
		filterfile = "{prefix}_filter.fa",
		filterkmer = "{prefix}_filter.fa_kmer.list"
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38
	resources:
		mem_mb=10000,
		slurm_extra="--mem=10G -c 1 "
	threads: 1
	output:
		annotate = protected("{prefix}_annotate.fa"),
	run:
		pref="_".join(wildcards.prefix.split("/")[-1].split("_")[:2])
		shell (" python {params.script}/reorderbytree.py -i {input.filterfile} -k  {input.filterkmer} -o {output.annotate} -p {pref} ")
		
rule graph:
	input:
		annotate = "{prefix}_annotate.fa",
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38
	resources:
		mem_mb=50000,
		slurm_extra="--mem=50G -c 25 "
	threads: 25
	output:
		graph = "{prefix}_annotate.fa_graph.FA",
		graphalign = "{prefix}_annotate.fa_allgraphalign.out",
	run:
		shell (" python {params.script}/graphmake.py -i {input.annotate}  -t {threads}  ")
		

rule typing:
	input:
		fasta = "{prefix}_annotate.fa",
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38
	resources:
		mem_mb=10000,
		slurm_extra="--mem=10G -c 1 "
	threads: 1
	output:
		typefile = "{prefix}_annotate.fa_types.txt",
	run:
		shell ("python {params.script}/TreeClassify.py -i {input.fasta}  -o {output.typefile} ")


rule treeannotate:
        input:
                anchorfile = "{prefix}_annotate.fa",
        params:
                qpath = QueryPath,
                script = ScriptFolder,
                hg38 = HG38
        resources:
                mem_mb=10000,
                slurm_extra="--mem=10G -c 1 "
        threads: 1
        output:
                refmatch = protected("{prefix}_annotate.fa_refmatch"),
        run:
                shell (" python {params.script}/TreeAnnotate.py -i {input.anchorfile} -o {output.refmatch} ")

rule typeannotate:
        input:
                refmatch = "{prefix}_annotate.fa_refmatch",
                typefile = "{prefix}_annotate.fa_types.txt",
        params:
                refgenes = RefGenes,
                qpath = QueryPath,
                script = ScriptFolder,
                hg38 = HG38
        resources:
                mem_mb=10000,
                slurm_extra="--mem=10G -c 1 "
        threads: 1
        output:
                typeannotate = protected("{prefix}_annotate.fa_typeannotate.txt"),
        run:
                name = wildcards.prefix.split("/")[-1][:3]
                shell (" python {params.script}/AnnotateTypes.py -a {input.refmatch} -t {input.typefile} -o {output.typeannotate} -g {params.refgenes} -p {name} ")	
