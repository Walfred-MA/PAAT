import os
import subprocess
#run: snakemake --cores 64 --keep-incomplete --wait-for-files --rerun-incomplete --latency-wait 100 --nt

#example command on HPC cluster: snakemake -k --cluster "sbatch --account=mchaisso_100 --time 50:00:00 --partition=qcb --time=200:00:00 {resources.slurm_extra}  " --default-resources "mem_mb=3000"  --jobs 50 --rerun-incomplete  --nt --wait-for-files  --latency-wait 100 --resources  mem_gb=1000 --configfile example.json &

with open("params.json", "r") as f:
	params = json.load(f)
	
	
slurm=params["slurm"]
RefGenes = params["RefGenes"]
HG38 = params["HG38"]
CHM13 = params["CHM13"]
QueryPath = params["QueryPath"]
ScriptFolder = params["ScriptFolder"]
Genelist = params["Genelist"]
SaveFolder = params["SaveFolder"]
TempFolder = params["TempFolder"]


try:
	os.mkdir(SaveFolder)
except:
	pass
	
queries = [("CHM13_h1", CHM13), ("HG38_h1",HG38)]
with open(QueryPath, mode = 'r') as f:
	
	for line in f:
		line = line.split()
		queries.append( (line[0], line[1]))
		
		
wksamples = [x[0] for x in queries]
queries_dic  = {x[0]:x[1] for x in queries}
genelist = []
with open(Genelist, mode = 'r') as f:
	
	for line in f:
		genelist.extend(line.strip().split(","))
		
wkfolders = ["{}{}".format(SaveFolder,gene) for gene in genelist] 

prefixes = ["{}/{}".format(folder,genename)  for folder, genename in zip(wkfolders,genelist) ]

for folder in wkfolders:
	try:
		os.mkdir(folder)
	except:
		pass
		
		
try:
	os.mkdir(TempFolder )
except:
	pass
	
	
	
	
partnum = 8

partitions = []
partitioncheckers = dict()
for groupindex in range(partnum):
	groupfile = "{}/Group_{}".format(TempFolder,groupindex)
	grouptargets = "{}/Group_{}_targets".format(TempFolder,groupindex)
	groupoutputs = "{}/Group_{}_outputs".format(TempFolder,groupindex)
	
	checker = groupfile + "_checker"
	
	if os.path.isfile(checker) == 0:
		
		partitions.append([open(groupfile, mode = 'w'),open(grouptargets, mode = 'w'), open(groupoutputs, mode = 'w')])
		
	else:
		partitions.append([])
		
groupfiles = set()
for i, prefix in enumerate(prefixes):
	
	try:
		os.mkdir("{}_assemblykmer/".format(prefix))
	except:
		pass
	try:
		os.mkdir("{}_genekmer/".format(prefix))
	except:
		pass
	try:
		os.mkdir("{}_kmerlist/".format(prefix))
	except:
		pass
	try:
		os.mkdir("{}_partitions/".format(prefix))
	except:
		pass
		
	groupindex = i%partnum
	
	groupfile = "{}/Group_{}".format(TempFolder,groupindex)
	
	grouptargets = "{}/Group_{}_targets".format(TempFolder,groupindex)
	groupoutputs = "{}/Group_{}_outputs".format(TempFolder,groupindex)
	
	targetfile = "{}_samples.fa".format(prefix)
	kmerfile = "{}_allkmers.txt".format(prefix)
	
	if os.path.isfile(kmerfile):
		continue
	
	
	outputfile = "{}_assemblykmer/".format(prefix)
	
	groupfiles.add(groupfile)
	
	if len( partitions[groupindex]):
		partitions[groupindex][0].write(prefix+"\n")
		partitions[groupindex][1].write(targetfile+"\n")
		partitions[groupindex][2].write(outputfile+"\n")
		
for groupindex in range(partnum):
	
	if len( partitions[groupindex]):
		partitions[groupindex][0].close()
		partitions[groupindex][1].close()
		partitions[groupindex][2].close()
		
groupfiles = list(groupfiles)

MEGA_PREF = "mega_pref" 
MEGA_ASSEM = "mega_assem" 

f1 = open(MEGA_PREF, mode = 'w')
f2 = open(MEGA_ASSEM, mode = 'w')

for queryname, querypath in queries:
	f1.write(queryname+".txt\n")
	f2.write(querypath+"\n")
f1.close()
f2.close()

rule all:
	input:
		genegroups = ["{}".format(group) for group in groupfiles],
		genegroupscheckers = ["{}_checker".format(group) for group in groupfiles],
		
		kmerlist = ["{}_allkmers.txt".format(prefix) for prefix in prefixes ],
		#fasta_filter = ["{}_samples.fa_kmervali.fa".format(prefix) for prefix in prefixes ],
		fasta_final = ["{}_samples.fa_kmervali.fa_final.fa".format(prefix) for prefix in prefixes],
		kmerlist_gcfiltered = ["{}_allkmers.txt_gcfiltered.list".format(prefix) for prefix in prefixes],
		kmerlist_final = ["{}_kmer_final.list".format(prefix) for prefix in prefixes],
		
		partitions = [ancient("{}_partitionchecker".format(prefix)) for prefix in prefixes],
		namepartition = ["{}_partitioninfo.txt".format(prefix)  for prefix in prefixes ]
		
		
rule assemkmers:
	input:  
		genegroup = "{group}"
	output: 
		genegroupscheckers = protected("{group}_checker")
	params: 
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
	threads: 62
	resources:
		mem_mb=120000,
		slurm_extra="--mem=120G  --cpus-per-task=62 "
	run:
		gene = ""
		if os.path.isfile(output.genegroupscheckers) == 0:
			shell("{params.script}/kmer_convertor  -I ./mega_assem -T {input.genegroup}_targets -O {input.genegroup}_outputs -P ./mega_pref -n {threads}")
			
		shell (" touch {output.genegroupscheckers} || true ")
		
rule filterkmer:
	input:
		genegroupscheckers = [ancient(group+"_checker") for group in groupfiles],
		samplefasta = ancient("{prefix}_samples.fa"),
	output:
		kmerlist = "{prefix}_allkmers.txt",
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		hprcerror = hprcfitler,
	resources:
		mem_mb=30000,
		slurm_extra="--mem=30G -c 10 "
	threads: 10
	run:
		gene=wildcards.prefix
		halfthreads=threads//2
		
		shell ("python {params.script}/split_tosamples.py -i {gene}_samples.fa -o {gene}_genekmer/")
		shell ("ls {gene}_genekmer/*.fa | xargs -P {threads} -I [] bash -c ' {params.script}/kmer_convertor -i [] -o [].fa_kmer.txt ' ")
		shell("python {params.script}/selectkmer.py -g {gene}_genekmer/ -a {gene}_assemblykmer/ -o {gene}_kmerlist/ -n {halfthreads}")
		shell("rm  {gene}_genekmer/* || true ")
		shell (" rm  {gene}_assemblykmer/* || true " )
		
		shell ("{params.script}/kmer_convertor -i {gene}_kmerlist/ -n {threads} -o {gene}_allkmers.txt -s 3")
		shell (" rm  {gene}_kmerlist/* || true " )
		
rule filterfasta:
	input:
		kmerlist = "{prefix}_allkmers.txt",
		samplefasta = ancient("{prefix}_samples.fa"),
	output:
		#fasta_filter = protected("{prefix}_samples.fa_kmervali.fa"),
		fasta_final = protected("{prefix}_samples.fa_kmervali.fa_final.fa"),
		kmerlist_gcfiltered = protected("{prefix}_allkmers.txt_gcfiltered.list"),
		kmerlist_final = protected("{prefix}_kmer_final.list"),
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		hprcerror = hprcfitler,
	resources:
		mem_mb=20000,
		slurm_extra="--mem=20G -c 1 "
	threads: 1
	run:
		shell ("python {params.script}/GCfiltration.py -i {input.kmerlist} -r {input.samplefasta}  -o {output.kmerlist_gcfiltered}")
		shell ("python {params.script}/querytrim_bykmer.py -i {input.samplefasta} -k {output.kmerlist_gcfiltered}  -o {output.fasta_final} -l {output.kmerlist_final} > {output.fasta_final}_kmerinfo.txt")
		
		
		
		
		
		
rule partition:
	input: 
		fasta_final = "{prefix}_samples.fa_kmervali.fa_final.fa",
		kmerlist_final = "{prefix}_kmer_final.list",
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		slurm = slurm,
	output:
		partitions = protected("{prefix}_partitionchecker")
	resources:
		mem_mb=100,
		slurm_extra="--mem=100m -c 1 ",
	run:
		gene=wildcards.prefix.split("/")[-1]
		
		shell (" find {wildcards.prefix}_partitions/  -type f -delete || true")
		
		shell (" size=$(cat {input.fasta_final} | grep \">\" | wc -l); size=$(( size * size / 10000000  )); size=$(( size > 10 ? size : 10 )); size=$(( size > 200 ? 200 : size  )) ; sbatch --wait  {params.slurm}  --mem=\"$size\"G  --ntasks=1 --cpus-per-task=1  {params.script}/runpartition_bykmer.sh {params.script}/partition_bykmer.py {input.fasta_final} {input.kmerlist_final} {wildcards.prefix}_partitions/{gene}_group ")
		
		allfiles = [ "{}_partitions/".format(wildcards.prefix)+ file for file in os.listdir( "{}_partitions/".format(wildcards.prefix) ) if file[-3:] == ".fa"]
		
		ifrun = 0
		for i,file in enumerate(allfiles):
			
			index = file[:-3].split("/")[-1].split("group")[1]
			index = format(i, 'o').replace('0','8')
			
			checksize = int(subprocess.check_output("cat {} | grep \"^>\" | wc -l".format(file), shell=True).decode())
			
			if checksize > 7000:
				
				shell (" size=$(cat {file} | grep \"^>\" | wc -l); if [ $size -gt 6000 ]; then size=$(( size * size / 10000000  )); size=$(( size > 10 ? size : 10 )); size=$(( size > 200 ? 200 : size  )) ; ( sbatch --wait  {params.slurm}  --mem=\"$size\"G  --ntasks=1 --cpus-per-task=1  {params.script}/runpartition_bykmer.sh {params.script}/partition_bykmer.py {file} {file}_kmer.list {wildcards.prefix}_partitions/{gene}_group0{i}0  \" -s 0.2 -c 1000 \" ) && ( rm {file} || true ) && ( rm {file}_kmer.list || true )  ; fi ")
				
				
		allfiles = [ "{}_partitions/".format(wildcards.prefix)+ file for file in os.listdir( "{}_partitions/".format(wildcards.prefix) ) if file[-3:] == ".fa"]
		
		ifrun = 0
		for i,file in enumerate(allfiles):
			
			index = file[:-3].split("/")[-1].split("group")[1]
			index = format(i, 'o').replace('0','8')
			
			checksize = int(subprocess.check_output("cat {} | grep \"^>\" | wc -l".format(file), shell=True).decode())
			
			if checksize > 10000 :
				
				shell (" size=$(cat {file} | grep \"^>\" | wc -l); if [ $size -gt 6000 ]; then size=$(( size * size / 10000000  )); size=$(( size > 10 ? size : 10 )); size=$(( size > 200 ? 200 : size  )) ; ( sbatch --wait  {params.slurm}  --mem=\"$size\"G  --ntasks=1 --cpus-per-task=1  {params.script}/runpartition_bykmer.sh {params.script}/partition_bykmer.py {file} {file}_kmer.list {wildcards.prefix}_partitions/{gene}_group00{index}0  \" -s 0.3 -c 1500 \" ) && ( rm {file} || true ) && ( rm {file}_kmer.list || true )  ; fi ")
				
			elif checksize > 7000:
				shell (" size=$(cat {file} | grep \"^>\" | wc -l); if [ $size -gt 6000 ]; then size=$(( size * size / 10000000  )); size=$(( size > 10 ? size : 10 )); size=$(( size > 200 ? 200 : size  )) ; ( sbatch --wait  {params.slurm}  --mem=\"$size\"G  --ntasks=1 --cpus-per-task=1  {params.script}/runpartition_bykmer.sh {params.script}/partition_bykmer.py {file} {file}_kmer.list {wildcards.prefix}_partitions/{gene}_group00{index}0  \" -s 0.3 -c 1000 \" ) && ( rm {file} || true ) && ( rm {file}_kmer.list || true )  ; fi ")
				
				
		allfiles = [ "{}_partitions/".format(wildcards.prefix)+ file for file in os.listdir( "{}_partitions/".format(wildcards.prefix) ) if file[-3:] == ".fa"]
		
		for i,file in enumerate(allfiles):
			
			index = file[:-3].split("/")[-1].split("group")[1]
			index = format(i, 'o').replace('0','8')
			
			checksize = int(subprocess.check_output("cat {} | grep \"^>\" | wc -l".format(file), shell=True).decode())
			
			if checksize > 10000 :
				shell (" size=$(cat {file} | grep \"^>\" | wc -l); if [ $size -gt 6000 ]; then size=$(( size * size / 10000000  )); size=$(( size > 10 ? size : 10 )); size=$(( size > 200 ? 200 : size  )) ; ( sbatch --wait  {params.slurm}  --mem=\"$size\"G  --ntasks=1 --cpus-per-task=1  {params.script}/runpartition_bykmer.sh {params.script}/partition_bykmer.py {file} {file}_kmer.list {wildcards.prefix}_partitions/{gene}_group00{index}0  \" -s 0.3 -c 2000 \" ) && ( rm {file} || true ) && ( rm {file}_kmer.list || true )  ; fi ")
				
			elif checksize > 7000:
				shell (" size=$(cat {file} | grep \"^>\" | wc -l); if [ $size -gt 6000 ]; then size=$(( size * size / 10000000  )); size=$(( size > 10 ? size : 10 )); size=$(( size > 200 ? 200 : size  )) ; ( sbatch --wait  {params.slurm}  --mem=\"$size\"G  --ntasks=1 --cpus-per-task=1  {params.script}/runpartition_bykmer.sh {params.script}/partition_bykmer.py {file} {file}_kmer.list {wildcards.prefix}_partitions/{gene}_group00{index}0  \" -s 0.3 -c 1500 \" ) && ( rm {file} || true ) && ( rm {file}_kmer.list || true )  ; fi ")
				
		shell ("touch {output.partitions} || true")
		
		
rule namepartition:
	input:
		fasta_final = "{prefix}_partitionchecker",
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		slurm = slurm,
	output:
		namepartition = protected("{prefix}_partitioninfo.txt")
	resources:
		mem_mb=5000,
		slurm_extra="--mem=5G -c 1 ",
	run:
		shell ( "find {wildcards.prefix}_partitions/  -type f -name '*.fa'  | xargs -I [] bash -c ' python {params.script}/querytrim_bykmer.py  -i []  -k []_kmer.list  -o []sta_raw -c 500 > []sta_kmerinfo.txt_raw  ;   python {params.script}/querytrim_bykmer.py  -i []sta_raw  -k []sta_raw_kmer.list  -o []sta -c 100 -r 0.0 > []sta_kmerinfo.txt   ' " )
		
		shell ( " ( find {wildcards.prefix}_partitions/ -type f -name '*.fasta' > {wildcards.prefix}_partitionlist ) || true" )
		
		shell (" python {params.script}/namepartition.py -i {wildcards.prefix}_partitionlist -g {RefGenes} > {output.namepartition}")
		
		shell (" cat {output.namepartition} | while read oldname name genelist ; do if [ -f $oldname  ]  ; then  newname=${{name//0group/0}}  ;  mv $oldname $name ; mv \"$oldname\"_kmer.list  \"$newname\"_kmer.list ; fi ; done ")
