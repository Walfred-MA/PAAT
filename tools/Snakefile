import os
#run: snakemake --cores 64 --keep-incomplete --wait-for-files --rerun-incomplete --latency-wait 100 --nt

with open("params.json", "r") as f:
	params = json.load(f)
	
QueryPath = params["QueryPath"]
ScriptFolder = params["ScriptFolder"]


queries = {}
with open(QueryPath, mode = 'r') as f:
	for line in f:
		line = line.split()
		queries[line[1]] = line[0]
		
wksamples = list(queries.values()) 
assemblies = list(queries.keys()) 

rule all:
	input:
		fasta  = [ancient(prefix+".fai") for prefix in assemblies],
		
rule assem:
	input:
		assem = ancient("{prefix}"),
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		chm13 = CHM13,
		temp=TempFolder
	resources:
		mem_mb=3000,
		slurm_extra="--mem=3G -c 1 "
	threads: 1
	output:
		check = protected("{prefix}.fai"),
	run:
		run = 1
		if run:
			queryname = queries[input.assem]
			assempath = input.assem
			
			shell (" {params.script}/windowmasker -mk_counts   -in {assempath} -out {assempath}_maskinfo ")
			shell (" {params.script}/windowmasker -ustat outputs/{assempath}_maskinfo  -dust yes -outfmt fasta  -in {assempath} -out {assempath}_mask.fa  ")
			shell ("mv {assempath}_mask.fa {assempath}")
			shell ("rm {assempath}_maskinfo  ")
			
			shell (" {params.script}/namecontigs.py -i {assempath} -n {queryname} -out {assempath}_  ")
			shell ("mv {assempath}_ {assempath}")
			
			shell("samtools faidx {assempath}")
			
