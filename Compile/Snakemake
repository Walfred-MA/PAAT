
import os
import subprocess
import json

#example command on HPC cluster: snakemake -k --cluster "sbatch --account=mchaisso_100 --time 50:00:00 --partition=qcb --time=200:00:00 {resources.slurm_extra}  " --default-resources "mem_mb=3000"  --jobs 50 --rerun-incomplete  --nt --wait-for-files  --latency-wait 100 --resources  mem_gb=1000 --configfile example.json &

with open("params.json", "r") as f:
    params = json.load(f)


slurm=params["slurm"]
RefGenes = params["RefGenes"]
HG38 = params["HG38"]
CHM13 = params["CHM13"]
QueryPath = params["QueryPath"]
ScriptFolder = params["ScriptFolder"]
Genelist = params["Genelist"]
SaveFolder = params["SaveFolder"]



queries = {"CHM13_h1": CHM13, "HG38_h1":HG38}
with open(QueryPath, mode = 'r') as f:
        for line in f:
                line = line.split()
                queries[line[0]] = line[1]

wksamples = list(queries.keys()) 

with open(hprccramfile, mode = 'r') as f:
        hprccrams = [x.split()[0].split("/")[-1].split(".")[0] for x in f.read().splitlines()]


allprefixes = [SaveFolder+file for file in os.listdir(SaveFolder) if file[-6:] == ".fasta"  ]

rule all:
        input:
                kmer  = [prefix+"_kmer.list" for prefix in allprefixes],
                filterkmer   = [prefix+"_filter.fa_kmer.list" for prefix in allprefixes],

                strdcorr  = [prefix for prefix in allprefixes],
                filterfile  = [prefix+"_filter.fa" for prefix in allprefixes],

                anchorfile  = [prefix+"_annotate.fa" for prefix in allprefixes],


                graphalign=[ancient(prefix+"_annotate.fa_allgraphalign.out") for prefix in allprefixes],
                graph=[ancient(prefix+"_annotate.fa_graph.FA") for prefix in allprefixes],

                kmerannotate=[prefix+"_annotate.fa_kmer.list" for prefix in allprefixes],

                matrix=[prefix+"_matrix.txt" for prefix in allprefixes],

                #typefile = [prefix+"_annotate.fa_types.txt" for prefix in allprefixes],

rule postfilter:
        input:
                strdcorr = "{prefix}",
                kmer = "{prefix}_kmer.list"
        params:
                qpath = QueryPath,
                script = ScriptFolder,
                hg38 = HG38,
                chm13=CHM13,
                hprcerror=hprcfitler
        resources:
                mem_mb=1000,
                slurm_extra="--mem=1G -c 1 "
        threads: 1
        output:
                filterfile = "{prefix}_filter.fa",
                filterkmer = "{prefix}_filter.fa_kmer.list"
        run:
                shell ("python {params.script}/querytrim_bykmer.py -i {input.strdcorr} -k  {input.kmer} -o {output.filterfile}_raw -l {output.filterkmer} > {output.filterfile}_info -c 0 -r 0.00 ")
                #if os.path.isfile(output.filterkmer) == False or os.stat(output.filterkmer).st_size < 10000:
                        #pass
                #else:

                shell ("python {params.script}/filtershortcontigs.py -i {output.filterfile}_raw  -o {output.filterfile} -r {params.hg38},{params.chm13}  -e {params.hprcerror} -q {params.qpath}")

rule annotate:
        input:
                filterfile = "{prefix}_filter.fa",
                filterkmer = "{prefix}_filter.fa_kmer.list"
        params:
                qpath = QueryPath,
                script = ScriptFolder,
                hg38 = HG38
        resources:
                mem_mb=10000,
                slurm_extra="--mem=10G -c 1 "
        threads: 1
        output:
                annotate = protected("{prefix}_annotate.fa"),
        run:
                pref="_".join(wildcards.prefix.split("/")[-1].split("_")[:2])
                shell (" python {params.script}/reorderbytree.py -i {input.filterfile} -k  {input.filterkmer} -o {output.annotate} -p {pref} ")

rule graph:
        input:
                annotate = "{prefix}_annotate.fa",
        params:
                qpath = QueryPath,
                script = ScriptFolder,
                hg38 = HG38
        resources:
                mem_mb=50000,
                slurm_extra="--mem=64G -c 32 "
        threads: 25
        output:
                graph = "{prefix}_annotate.fa_graph.FA",
                graphalign = "{prefix}_annotate.fa_allgraphalign.out",
        run:
                shell (" python {params.script}/graphmake.py -i {input.annotate}  -t {threads}  ")


rule kmerannotate:
        input:
                annotate = "{prefix}_annotate.fa",
                kmer = "{prefix}_filter.fa_kmer.list",
                graph = ancient("{prefix}_annotate.fa_graph.FA"),
                graphalign = ancient("{prefix}_annotate.fa_allgraphalign.out"),
        params:
                qpath = QueryPath,
                script = ScriptFolder,
                hg38 = HG38,
                kmererror = kmererrorlist
        resources:
                mem_mb=5000,
                slurm_extra="--mem=5G -c 1 "
        threads: 1
        output:
                kmerannotate = "{prefix}_annotate.fa_kmer.list",
        run:
                shell (" touch {input.graphalign}_error || true ")
                shell (" python {params.script}/kmerannotate.py -s {input.annotate} -k  {input.kmer} -a {input.graphalign} -g {input.graph} -o {output.kmerannotate} -e {params.kmererror} ") 



rule compilematrix:
        input:
                annotate = "{prefix}_annotate.fa",
                kmerannotate = "{prefix}_annotate.fa_kmer.list",
                graphalign = ancient("{prefix}_annotate.fa_allgraphalign.out"),
        params:
                qpath = QueryPath,
                script = ScriptFolder,
                hg38 = HG38
        resources:
                mem_mb=10000,
                slurm_extra="--mem=10G -c 1 "
        threads: 1
        output:
                matrix = "{prefix}_matrix.txt",
        run:
                shell (" python {params.script}/matrixcompile.py -s {input.annotate} -a  {input.graphalign}  -k  {input.kmerannotate}  -o {output.matrix}  ")
