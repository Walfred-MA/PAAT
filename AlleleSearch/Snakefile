import os
import subprocess
import json

#example command on HPC cluster: snakemake -k --cluster "sbatch --account=mchaisso_100 --time 50:00:00 --partition=qcb --time=200:00:00 {resources.slurm_extra}  " --default-resources "mem_mb=3000"  --jobs 50 --rerun-incomplete  --nt --wait-for-files  --latency-wait 100 --resources  mem_gb=1000 --configfile example.json &

with open("params.json", "r") as f:
    params = json.load(f)


slurm=params["slurm"]
RefGenes = params["RefGenes"]
HG38 = params["HG38"]
CHM13 = params["CHM13"]
QueryPath = params["QueryPath"]
ScriptFolder = params["ScriptFolder"]
Genelist = params["Genelist"]
SaveFolder = params["SaveFolder"]


try:
	os.mkdir(SaveFolder)
except:
	pass
	
queries = [("CHM13_h1", CHM13), ("HG38_h1",HG38)]
with open(QueryPath, mode = 'r') as f:
	
	for line in f:
		line = line.split()
		queries.append( (line[0], line[1]))


		
		
wksamples = [x[0] for x in queries]
queries_dic  = {x[0]:x[1] for x in queries}
genelist = []
with open(Genelist, mode = 'r') as f:
	
	for line in f:
		genelist.extend(line.strip().split(","))
		
wkfolders = ["{}{}".format(SaveFolder,gene) for gene in genelist] 

prefixes = ["{}/{}".format(folder,genename)  for folder, genename in zip(wkfolders,genelist) ]


for folder in wkfolders:
	try:
		os.mkdir(folder)
	except:
		pass


		
		
rule all:
	input:
		gff = [ancient("{}.gff3".format(prefix)) for prefix in prefixes],
		exons = ["{}_exons.bed".format(prefix) for prefix in prefixes],
		genes = ["{}_genes.bed".format(prefix) for prefix in prefixes],
		exonfa = ["{}_exons.fa".format(prefix) for prefix in prefixes],
		exonfa_anchor = ["{}_exons_anchor.fa".format(prefix) for prefix in prefixes],
		genefa = ["{}_genes.fa".format(prefix) for prefix in prefixes],
		genefa_anchor = ["{}_genes_anchor.fa".format(prefix) for prefix in prefixes],
		geneandexonfa=["{}_geneandexons.fa".format(prefix) for prefix in prefixes],
		
		exonfilter = ["{}_exons_anchor_filter.txt".format(prefix) for prefix in prefixes],
		genefilter = ["{}_genes_anchor_filter.txt".format(prefix) for prefix in prefixes],
		
		bedtouch = ["{}_hotspots/{}".format(prefixes[0],sample) for sample in wksamples ],
		hotspotcheck = [ancient("{}_hotspots/{}_hotspotchecker".format(prefixes[0],sample)) for sample in wksamples ],
		lastzcheck = [ancient("{}_hotspots/{}_alignchecker".format(prefixes[0],sample)) for sample in wksamples ],
		allpaf = [ancient("{}_allqueries.paf".format(prefix)) for prefix in prefixes],
		samplefasta = [ancient("{}_samples.fa".format(prefix)) for prefix in prefixes], 
		

		
rule gff:
	input:
		RefGenes
	output:
		gff = protected("{prefix}.gff3"),
	resources:
		mem_mb=5000,
		slurm_extra="--mem=5G -c 1 "
	run:
		gene=wildcards.prefix.split("/")[-1]
		if gene == "C4":
			gene="C4[AB]" 
		if gene == "PC" or gene == "ETFB" or gene == "LIX1" or gene == "PPIA" or gene == "PTPRC" or gene == "SRR":
			gene+=";" 
		if gene == "C2" or gene == "C3":
			gene+="[;-]" 
		if gene == "PACS":
			gene="PACS[12]" 
		if  gene == "MPI":
			gene="MPI;" 
		if  gene == "HBB":
			gene="HB[BD]"
		if  gene == "GAL":
			gene="GAL;" 
		if  gene == "PLEK":
			gene="PLEK;"
		if  gene[-1].isdigit():
			gene+="[A-Z;.,-]" 
		if  gene == "LPA":
			gene="LPA[^R]"
		if  gene == "HLA-D":
			gene+="[^a-zA-Z]*;"
		if  gene == "TNKS":
			gene+=";" 
		if  gene == "TNF":
			gene+=';'
		if  gene == "CEL":
			gene+=';'
		if  gene == "GK":
			gene+=';'
		if  gene == "GGN":
			gene+=';'
			
		if os.path.isfile(output.gff) == False:
			shell ("cat {input} | grep \"gene_name={gene}\" > {output.gff} ")
			
			
rule refcoordinates:
	input:
		gff = ancient("{prefix}.gff3"),
	params:
		script = ScriptFolder,
		#shell = "cat {}  | awk \'{{{{ if ($3 == \"{}\") print $1,$4,$5,$7,$9}}}}\' | awk -v var=\"{}_id=[^;]+\" \'match($5,var) {{{{ print $1,$2,$3,$4, substr($5,RSTART+8,RLENGTH-8) }}}} \' > {} "
	output:
		exons_raw = protected("{prefix}_exons_raw.bed"),
		genes_raw = protected("{prefix}_genes_raw.bed"),
		exons = protected("{prefix}_exons.bed"),
		genes = protected("{prefix}_genes.bed"),
	resources:
		mem_mb=5000,
		slurm_extra="--mem=5G -c 1 "
	run:
		shell ("bash {params.script}/gff3tobed.sh {input.gff} exon {output.exons_raw}")
		
		shell ("bash {params.script}/gff3tobed.sh {input.gff} gene {output.genes_raw}")
		
		shell ("python {params.script}/bedorganize.py -i {output.exons_raw} -o {output.exons}")
		
		shell ("python {params.script}/bedorganize.py -i {output.genes_raw} -o {output.genes}")
		
		
		
		
		
rule reffasta:
	input: 
		exons = "{prefix}_exons.bed",
		genes = "{prefix}_genes.bed",
	output:
		exonfa = protected("{prefix}_exons.fa"),
		exonfa_anchor = protected("{prefix}_exons_anchor.fa"),
		genefa = protected("{prefix}_genes.fa"),
		genefa_anchor = protected("{prefix}_genes_anchor.fa"),
		geneandexonfa=protected("{prefix}_geneandexons.fa"),
	params:
		script = ScriptFolder,
		hg38 = HG38,
		anchor = 3000,
		#shell = " output=\"{}\"; theref=\"{}\"; if [[ ! -f $output ]] ; then cat {} | while read chrom start end strd name; do anchor={}; start2=$(( $start > $anchor  ?  ($start - $anchor ) : 0  )) ;start=$(($start - $anchor )) ; end=$(($end + $anchor ))  ; echo \">$name $chrom:$start-$end$strd \"  ; if [[ $strd == \"+\" ]] ; then  samtools faidx $theref \"$chrom:$start2-$end\" | grep -v \"^>\" ; else  samtools faidx  $theref \"$chrom:$start2-$end\" -i  | grep -v \"^>\" ;fi ; done > $output ; fi "
	resources:
		mem_mb=5000,
		slurm_extra="--mem=5G -c 1 "
	run:
		
		shell("if [[ ! -f {output.exonfa} ]] ; then bash {params.script}/bed6tofasta.sh {params.hg38} {input.exons} 0 {output.exonfa} ;fi ")
		
		shell("if [[ ! -f {output.exonfa_anchor} ]] ; then bash {params.script}/bed6tofasta.sh {params.hg38} {input.exons} 100 {output.exonfa_anchor} ;fi ")
		
		shell("if [[ ! -f {output.genefa} ]] ; then bash {params.script}/bed6tofasta.sh {params.hg38} {input.genes} 0 {output.genefa} ;fi ")
		
		shell("if [[ ! -f {output.genefa_anchor} ]] ; then bash {params.script}/bed6tofasta.sh {params.hg38} {input.genes} {params.anchor} {output.genefa_anchor} ;fi ")
		
		shell("cat {output.exonfa} > {output.geneandexonfa} && echo $\'\\n\' >> {output.geneandexonfa} && cat {output.genefa_anchor} >> {output.geneandexonfa}")
		
		shell ("makeblastdb -in {output.geneandexonfa}  -dbtype nucl -parse_seqids -out {output.geneandexonfa}_db ")
		
		
		
		
		
rule exonkmerfilter:
	input:
		exonfa = "{prefix}_exons_anchor.fa",
		genefa_anchor = "{prefix}_genes_anchor.fa",
		geneandexonfa="{prefix}_geneandexons.fa",
	output:
		exonfa_filter = protected("{prefix}_exons_anchor_filter.txt"),
		genefa_filter = protected("{prefix}_genes_anchor_filter.txt"),
	params:
		qpath = QueryPath,
		script = ScriptFolder
	resources:
		mem_mb=20000,
		slurm_extra="--mem=20G -c 1 "
	threads: 1
	shell:
		"""
		{params.script}/kmer_convertor -i  {CHM13}  -t {input.exonfa} -o {output.exonfa_filter}
		cat {output.exonfa_filter} | awk '{{if ($2 < 255) print \">\\n\"$1 }}' > {output.exonfa_filter}_
		mv  {output.exonfa_filter}_ {output.exonfa_filter}
		{params.script}/kmer_convertor -i {CHM13} -t {input.genefa_anchor} -o {output.genefa_filter}
		cat {output.genefa_filter} | awk '{{if ($2 < 255) print \">\\n\"$1 }}' > {output.genefa_filter}_
		mv {output.genefa_filter}_ {output.genefa_filter}
		python {params.script}/annotate_kmer.py -i  {input.geneandexonfa}  -k {output.genefa_filter} -o {input.geneandexonfa}_
		mv {input.geneandexonfa}_ {input.geneandexonfa} 
		"""
		
		
rule folders:
	input:
		exonfa_anchor = ["{}_exons_anchor.fa".format(prefix) for prefix in prefixes],
	output:
		bedtouch = [prefixes[0]+"_hotspots/{}".format(sample) for sample in wksamples ],
	resources:
		mem_mb=1000,
		slurm_extra="--mem=1G -c 1 "
	run:
		for prefix in prefixes:
			try:
				os.mkdir("{}_hotspots/".format(prefix))
			except:
				pass
				
		for sample in wksamples:
			try:
				os.system("touch {}_hotspots/{}".format(prefixes[0],sample))
			except:
				pas
				
				
rule hotspots:
	input:
		bedtouch = prefixes[0]+"_hotspots/{sample}", 
		exonfa_anchor = ["{}_exons_anchor_filter.txt".format(prefix) for prefix in prefixes],
		genefa_anchor =  ["{}_genes_anchor_filter.txt".format(prefix) for prefix in prefixes],
		query = lambda wildcards: queries_dic[wildcards.sample]
	output:
		#bed = [prefix+"_hotspots/{sample}_hotspot.txt" for prefix in prefixes],
		bed = protected(prefixes[0]+"_hotspots/{sample}_hotspotchecker"),
	params:
		qpath = QueryPath,
		script = ScriptFolder
	resources:
		mem_mb=50000,
		slurm_extra="--mem=50G -c 1 "
	threads: 1
	run:
		runhotspots = 0
		
		MEGA_TARGET = input.bedtouch+"_"+"mega_target"
		MEGA_OUTPUT = input.bedtouch+"_"+"mega_output"
		MEGA_TARGET2 = input.bedtouch+"_"+"mega_target2"
		MEGA_OUTPUT2 = input.bedtouch+"_"+"mega_output2"
		
		t1 = open(MEGA_TARGET, mode = 'w')
		o1 = open(MEGA_OUTPUT, mode = 'w')
		t2 = open(MEGA_TARGET2, mode = 'w')
		o2 = open(MEGA_OUTPUT2, mode = 'w')
		
		for prefix in prefixes:
			if os.path.isfile(prefix+"_hotspots/{}_hotspot.txt".format(wildcards.sample)) and os.stat(prefix+"_hotspots/{}_hotspot.txt".format(wildcards.sample)).st_size > 10:
				pass
			else:   
				runhotspots = 1
				o1.write("{}_hotspots/exons_\n".format(prefix))
				t1.write("{}_exons_anchor_filter.txt".format(prefix)+"\n")
				
				o2.write("{}_hotspots/genes_\n".format(prefix))
				t2.write("{}_genes_anchor_filter.txt".format(prefix)+"\n")
				
		t1.close()
		o1.close()
		t2.close()
		o2.close()
		
		if runhotspots:
			shell ("{params.script}/kmer_convertor -i  {input.query}  -T {MEGA_TARGET} -O {MEGA_OUTPUT} -p {wildcards.sample} -s 1 -c 50 ")
			shell ("{params.script}/kmer_convertor -i  {input.query}  -T {MEGA_TARGET2} -O {MEGA_OUTPUT2} -p {wildcards.sample} -s 1 -c 200 ")
			
			
			shell (" cat {MEGA_OUTPUT} | xargs -I [] bash -c 'folder=$(echo [] | rev | cut -d/ -f2- | rev) ; file=$folder/exons_{wildcards.sample}_hotspot.txt; anotherfile=$folder/genes_{wildcards.sample}_hotspot.txt ; combfile=$folder/{wildcards.sample}_hotspot.txt ;  cat  $anotherfile >> $file ;  rm $anotherfile ; mv $file $combfile  ' ")
			
		shell ("date > {output.bed} || true " )
		
		
		
		
rule align:
	input:
		bed = prefixes[0]+"_hotspots/{sample}_hotspotchecker",
	output:
		align = protected(prefixes[0] + "_hotspots/{sample}_alignchecker"),
	params:
		qpath = QueryPath,
		script = ScriptFolder
	resources:
		mem_mb=4000,
		slurm_extra="--mem=8G -c 4 "
	threads: 1
	run:
		shell ("touch {}".format(output.align))
		
		MEGA_OUTPUT = "_".join(input.bed.split("_")[:-1])+"_"+"mega_output"
		
		for i,prefix in enumerate(prefixes):
			
			bed = "{}_hotspots/{}_hotspot.txt".format(prefix, wildcards.sample)
			
			fastafile = "{}.fa".format(bed)
			
			geneandexonfa = "{}_geneandexons.fa".format(prefix)
			
			#align = "{}_hotspots/{}_hotspot.fa_align.tsv".format(prefix, wildcards.sample)
			
			if os.path.isfile(fastafile+".paf_filter.PAF") and os.stat(fastafile+".paf_filter.PAF").st_size > 100:
				continue
			
			path = queries_dic[wildcards.sample]
			
			if i % 100 == 0:
				shell (" python {}/hotspot_regions.py -p {} -I {} -q {}  -O {} -s {} -n 100  ".format(params.script, wildcards.sample,MEGA_OUTPUT, path, MEGA_OUTPUT , i))
				
			if not os.path.isfile(fastafile) :
				shell ("touch "+fastafile)
				shell (" python {}/hotspot_regions_single.py -i {} -q {}  -o {}   ".format(params.script, bed , path, fastafile ))
				
			shell (" echo {} {}  >> outputcheck".format(prefix, wildcards.sample))
			
			shell ("blastn -query {}  -db {}_db  -outfmt 17 -num_threads 4  -out {}_blast.out || true".format(fastafile, geneandexonfa,fastafile ))
			
			shell (" touch {}.paf || true ".format(fastafile))
			
			shell (" touch {}.paf_filter.PAF || true ".format(fastafile))
			
			shell (" python {}/blastntopaf.py -i {}_blast.out -q {} > {}.paf  ".format(params.script, fastafile,fastafile, fastafile))
			
			shell (" python {}/filter_alignment.py -i {}.paf -r {} -o {}.paf_filter.PAF || true ".format(params.script, fastafile, geneandexonfa, fastafile))
			
			shell (" rm  {} || true ".format(fastafile))
			
			
rule paf:
	input:
		exonfa = "{prefix}_exons_anchor.fa",
		lastz = [prefixes[0]+"_hotspots/{}_alignchecker".format(sample) for sample in wksamples],
	output:
		allpaf = protected("{prefix}_allqueries.paf")
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38
	resources:
		mem_mb=2000,
		slurm_extra="--mem=2G -c 1 "
	threads: 1
	run:
		for prefix in [wildcards.prefix]:
			if os.path.isfile("{}_allqueries.paf".format(prefix)) and os.stat("{}_allqueries.paf".format(prefix)).st_size > 100:
				continue
			
			shell ("rm {}_allqueries.paf || true".format(prefix))
			shell (" for file in $( ls {}_hotspots/*.paf_filter.PAF ) ;  do cat $file >> {}_allqueries.paf ; done  " .format(prefix, prefix))
			
			
			
rule samplegenes:
	input:
		allpaf = ancient("{prefix}_allqueries.paf"),
		genefa = "{prefix}_genes.fa",
	output:
		samplefasta  = protected("{prefix}_samples.fa"),
	params:
		qpath = QueryPath,
		script = ScriptFolder
	resources:
		mem_mb=10000,
		slurm_extra="--mem=10G -c 1 "
	threads: 1
	run:
		if os.path.isfile(output.samplefasta) and os.stat(output.samplefasta).st_size > 100:
			pass
		else:
			shell ("rm {output.samplefasta} || true ; python {params.script}/generate_fasta.py  -i {input.allpaf} -q {params.qpath} -g {input.genefa} -o {output.samplefasta} -r {HG38},{CHM13}  ")
			
			
for prefix in prefixes:
	try:
		os.mkdir("{}_assemblykmer/".format(prefix))
	except:
		pass
	try:
		os.mkdir("{}_genekmer/".format(prefix))
	except:
		pass
	try:
		os.mkdir("{}_kmerlist/".format(prefix))
	except:
		pass
		
		
rule assemkmers:
	input:  
		#kmerfasta  = ["{}_samples.fa".format(prefix) for prefix in prefixes],
		kmerfasta = ancient("{prefix}_samples.fa")
	output: 
		#assemblykmer = ["{}_assemblykmercheck".format(prefix) for prefix in prefixes],
		assemblykmer = protected("{prefix}_assemblykmerchecker")
	params: 
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
	threads: 1
	resources:
		mem_mb=1500,
		slurm_extra="--mem=1500M --ntasks=1  --cpus-per-task=1 "
	run:
		for sample, samplefasta in queries_dic.items():
			
			filename = "{}_assemblykmer/{}.txt".format(wildcards.prefix, sample)
			
			
			if os.path.isfile(filename) and os.stat(filename).st_size > 10:
				
				#shell ("echo {wildcards.prefix}_assemblykmer/{sample}.txt >> finishedassemkmer")
				pass
			else:
				shell ("{params.script}/kmer_convertor -i {samplefasta} -t {wildcards.prefix}_samples.fa -o {wildcards.prefix}_assemblykmer/ -p {sample}.txt  -n {threads}")
		shell (" touch {output.assemblykmer}  ")
		
		
		
rule genekmers:
	input:
		samplefasta  = ancient("{prefix}_samples.fa")
	output:
		kmerfasta  = protected("{prefix}_samples.fa_KmerRegion.fa")
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
	threads: 1
	resources:
		mem_mb=10000,
		slurm_extra="--mem=10G -c 1 "
	shell:
		"""
		python {params.script}/KmerRegion.py -i {input.samplefasta} -o {output.kmerfasta}
		python {params.script}/split_tosamples.py -i {output.kmerfasta} -o {wildcards.prefix}_genekmer/
		ls {wildcards.prefix}_genekmer/*.fa | xargs -I [] bash -c ' {params.script}/kmer_convertor -i [] -o [].fa_kmer.txt '
		"""
		
		
rule selectkmer:
	input: 
		assemblykmer = ancient("{prefix}_assemblykmerchecker"),
		kmerfasta  = "{prefix}_samples.fa_KmerRegion.fa"
	output: 
		selectkmercheck = protected("{prefix}_selectkmerchecker")
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
	threads: 1
	resources:
		mem_mb=10000,
		slurm_extra="--mem=10G -c 1 "
	shell:
		"""
		python {params.script}/selectkmer.py -g {wildcards.prefix}_genekmer/ -a {wildcards.prefix}_assemblykmer/ -o {wildcards.prefix}_kmerlist/
		touch {output.selectkmercheck} || true
		"""
		
		
rule merge:
	input:
		selectkmercheck = "{prefix}_selectkmerchecker",
	output:
		#kmerlist_raw = "{prefix}_allkmers.txt_raw.txt",
		kmerlist = protected("{prefix}_allkmers.txt"),
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		hprcerror = hprcfitler,
	threads: 25
	resources:
		mem_mb=50000,
		slurm_extra="--mem=50G --cpus-per-task=25 --ntasks=1 "
	run:
		shell (" folder=$(echo {output.kmerlist} | rev | cut -d/ -f2- | rev ) ; python {params.script}/kmerlist_merge.py  -i {wildcards.prefix}_kmerlist/ -n 25 -o {output.kmerlist} " )
		
		shell("rm  {wildcards.prefix}_genekmer/* || true ")
		shell (" rm  {wildcards.prefix}_assemblykmer/* || true " )
		shell (" rm {wildcards.prefix}_kmerlist/* || true ")
		
		
#cat {output.kmerlist_raw} | cut -f1 > {output.kmerlist} 
		
rule filterfasta:
	input:
		samplefasta = ancient("{prefix}_samples.fa"),
		#kmerlist_raw = "{prefix}_allkmers.txt_raw.txt",
		kmerlist = "{prefix}_allkmers.txt",
	output:
		fasta_filter = protected("{prefix}_samples.fa_kmervali.fa"),
		fasta_final = protected("{prefix}_samples.fa_kmervali.fa_final.fa"),
		kmerlist_gcfiltered = protected("{prefix}_allkmers.txt_gcfiltered.list"),
		kmerlist_final = protected("{prefix}_kmer_final.list"),
	params:
		qpath = QueryPath,
		script = ScriptFolder,
		hg38 = HG38,
		hprcerror = hprcfitler,
	resources:
		mem_mb=10000,
		slurm_extra="--mem=10G -c 1 "
	threads: 1
	shell:
		"""
		python {params.script}/GCfiltration.py -i {input.kmerlist} -r {input.samplefasta}  -o {output.kmerlist_gcfiltered} && python {params.script}/querylist_filterbykmer.py -i {input.samplefasta} -k {output.kmerlist_gcfiltered}  -o {output.fasta_filter} -l {output.kmerlist_final} > {output.fasta_filter}_kmerinfo.txt && python {params.script}/filtershortcontigs.py -i {output.fasta_filter} -o {output.fasta_final} -e {params.hprcerror} 
		"""			
		
